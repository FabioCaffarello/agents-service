name: CI Main

on:
  workflow_call:
    secrets: {}
    inputs:
      settings-file:
        description: 'Path to the settings file'
        required: false
        type: string
        default: '.github/ci-settings.yml'
      runs-on:
        required: false
        type: string
        default: ubuntu-latest
      timeout:
        required: false
        type: number
        default: 60
      install-commands:
        description: 'Commands to install additional dependencies'
        required: false
        type: string
        default: ""
      final-commands:
        description: 'Commands to run after setup (e.g., make lint or make test)'
        required: false
        type: string
        default: ""

jobs:
  main:
    runs-on: ${{ inputs.runs-on }}
    name: Run
    timeout-minutes: ${{ inputs.timeout }}
    defaults:
      run:
        working-directory: ${{ github.workspace }}
        shell: bash

    steps:
      # ---------------------------------------------------
      # 1) CHECKOUT CODE
      # ---------------------------------------------------
      - uses: actions/checkout@v4
        name: Checkout [Pull Request]
        if: ${{ github.event_name == 'pull_request' }}
        with:
          ref: ${{ github.event.pull_request.head.sha }}
          fetch-depth: 0

      - uses: actions/checkout@v4
        name: Checkout [Default Branch]
        if: ${{ github.event_name != 'pull_request' }}
        with:
          fetch-depth: 0

      # ---------------------------------------------------
      # 2) PARSE SETTINGS FROM YAML FILE
      # ---------------------------------------------------
      - name: Parse additional settings
        id: settings-parser
        uses: christian-ci/action-yaml-github-output@v2
        with:
          file_path: './${{ inputs.settings-file }}'

      # ---------------------------------------------------
      # 3) SET UP PYTHON
      # ---------------------------------------------------
      - name: Set up Python
        uses: actions/setup-python@v5
        with:
          python-version: ${{ steps.settings-parser.outputs.python-version }}

      # ---------------------------------------------------
      # 4) PRINT RUNTIME VERSIONS
      # ---------------------------------------------------
      - name: Print runtime versions
        run: |
          echo "Python: $(python --version)"

      # ---------------------------------------------------
      # 5) INSTALL UV
      # ---------------------------------------------------
      - name: Install uv
        uses: astral-sh/setup-uv@v5
        with:
          version: ${{ steps.settings-parser.outputs.uv-version }}

      # ---------------------------------------------------
      # 6) CACHE UV DEPENDENCIES
      #    (Assumes uv caches packages in ~/.cache/uv)
      # ---------------------------------------------------
      - name: Define a cache dependency glob
        uses: astral-sh/setup-uv@v5
        with:
          enable-cache: true
          cache-dependency-glob: "**/pyproject.toml"

      # ---------------------------------------------------
      # 7) INSTALL PROJECT DEPENDENCIES
      # ---------------------------------------------------
      - name: Install project dependencies
        run: |
          uv pip install -r pyproject.toml
          if [ -n "${{ inputs.install-commands }}" ]; then
            echo "Running additional install commands..."
            eval "${{ inputs.install-commands }}"
          fi

      # ---------------------------------------------------
      # 8) RUN FINAL COMMANDS WITH ENV ACTIVATED
      # ---------------------------------------------------
      - name: Run final commands
        if: ${{ inputs.final-commands != '' }}
        run: |
          source .uv/bin/activate
          eval "${{ inputs.final-commands }}"
