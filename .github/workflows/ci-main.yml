name: CI Main

on:
  workflow_call:
    secrets: {}
    inputs:
      settings-file:
        description: 'Path to the settings file'
        required: false
        type: string
        default: '.github/ci-settings.yml'
      runs-on:
        required: false
        type: string
        default: ubuntu-latest
      timeout:
        required: false
        type: number
        default: 60
      install-commands:
        description: 'Commands to install additional dependencies'
        required: false
        type: string
        default: ""
      final-commands:
        description: 'Commands to run after setup (e.g., make lint or make test)'
        required: false
        type: string
        default: ""
      use-coverage:
        description: 'Whether to use coverage or not'
        required: false
        type: boolean
        default: false

jobs:
  main:
    runs-on: ${{ inputs.runs-on }}
    name: Run
    timeout-minutes: ${{ inputs.timeout }}
    defaults:
      run:
        working-directory: ${{ github.workspace }}
        shell: bash

    steps:
      # ---------------------------------------------------
      # 1) CHECKOUT CODE
      # ---------------------------------------------------
      - uses: actions/checkout@v4
        name: Checkout [Pull Request]
        if: ${{ github.event_name == 'pull_request' }}
        with:
          ref: ${{ github.event.pull_request.head.sha }}
          fetch-depth: 0

      - uses: actions/checkout@v4
        name: Checkout [Default Branch]
        if: ${{ github.event_name != 'pull_request' }}
        with:
          fetch-depth: 0

      # ---------------------------------------------------
      # 2) PARSE SETTINGS FROM YAML FILE
      # ---------------------------------------------------
      - name: Parse additional settings
        id: settings-parser
        uses: christian-ci/action-yaml-github-output@v2
        with:
          file_path: './${{ inputs.settings-file }}'

      # ---------------------------------------------------
      # 3) SET UP PYTHON
      # ---------------------------------------------------
      - name: Set up Python
        uses: actions/setup-python@v5
        with:
          python-version: ${{ steps.settings-parser.outputs.python-version }}

      # ---------------------------------------------------
      # 4) PRINT RUNTIME VERSIONS
      # ---------------------------------------------------
      - name: Print runtime versions
        run: |
          echo "Python: $(python --version)"

      # ---------------------------------------------------
      # 5) INSTALL UV
      # ---------------------------------------------------
      - name: Install uv
        uses: astral-sh/setup-uv@v5
        with:
          version: ${{ steps.settings-parser.outputs.uv-version }}

      # ---------------------------------------------------
      # 6) CACHE UV DEPENDENCIES
      #    (Assumes uv caches packages in ~/.cache/uv)
      # ---------------------------------------------------
      - name: Define a cache dependency glob for uv dependencies
        uses: astral-sh/setup-uv@v5
        with:
          enable-cache: true
          cache-dependency-glob: "**/pyproject.toml"

      # ---------------------------------------------------
      # 7) CACHE THE VIRTUAL ENVIRONMENT
      # ---------------------------------------------------
      - name: Cache .venv
        id: cache-venv
        uses: actions/cache@v4
        with:
          path: .venv
          key: venv-${{ hashFiles('**/pyproject.toml') }}
          restore-keys: |
            venv-

      # ---------------------------------------------------
      # 8) CREATE UV VIRTUAL ENVIRONMENT (if not restored)
      # ---------------------------------------------------
      - name: Create uv virtual environment
        if: steps.cache-venv.outputs.cache-hit != 'true'
        run: uv venv .venv

      # ---------------------------------------------------
      # 9) INSTALL PROJECT DEPENDENCIES (including dev/docs)
      # ---------------------------------------------------
      - name: Install project dependencies
        run: |
          uv sync --all-extras

      # ---------------------------------------------------
      # 10) RUN FINAL COMMANDS WITH ENV ACTIVATED
      # ---------------------------------------------------
      - name: Run final commands
        if: ${{ inputs.final-commands != '' }}
        run: |
          uv run ${{ inputs.final-commands }}

      # ---------------------------------------------------
      # 12) UPLOAD HTML COVERAGE ARTIFACT
      # ---------------------------------------------------
      - name: Upload Coverage HTML Report
        if: ${{ github.event_name == 'pull_request' && inputs.use-coverage == true }}
        uses: actions/upload-artifact@v4
        with:
          name: coverage-html
          path: htmlcov

      # ---------------------------------------------------
      # 13) POST HTML COVERAGE REPORT AS PR COMMENT
      # ---------------------------------------------------
      - name: Post HTML Coverage Report as PR Comment
        if: ${{ github.event_name == 'pull_request' && inputs.use-coverage == true }}
        uses: actions/github-script@v6
        with:
          script: |
            const fs = require('fs');
            // Read the HTML coverage report (ensure your report is generated to htmlcov/index.html)
            const html = fs.readFileSync('htmlcov/index.html', 'utf8');

            // Use a regex to capture the first <table>...</table> block
            const tableMatch = html.match(/<table[^>]*>([\s\S]*?)<\/table>/i);
            if (!tableMatch) {
              throw new Error("No table found in the HTML coverage report.");
            }
            const tableHtml = tableMatch[1];

            // Extract rows from the table using regex
            const rowRegex = /<tr>([\s\S]*?)<\/tr>/gi;
            let rows = [];
            let row;
            while ((row = rowRegex.exec(tableHtml)) !== null) {
              const rowContent = row[1];
              // Extract cells from <th> or <td> elements
              const cellRegex = /<(td|th)[^>]*>([\s\S]*?)<\/\1>/gi;
              let cells = [];
              let cell;
              while ((cell = cellRegex.exec(rowContent)) !== null) {
                // Remove any inner HTML tags from the cell content and trim
                const text = cell[2].replace(/<[^>]+>/g, '').trim();
                cells.push(text);
              }
              if (cells.length > 0) {
                rows.push(cells);
              }
            }

            // Build a Markdown table from the rows
            let md = "## Coverage Report\n\n";
            if (rows.length > 0) {
              // Use the first row as the header
              md += "| " + rows[0].join(" | ") + " |\n";
              md += "| " + rows[0].map(() => "---").join(" | ") + " |\n";
              for (let i = 1; i < rows.length; i++) {
                md += "| " + rows[i].join(" | ") + " |\n";
              }
            } else {
              md += "No table data found.";
            }

            // Post the markdown as a comment on the pull request
            github.rest.issues.createComment({
              owner: context.repo.owner,
              repo: context.repo.repo,
              issue_number: context.issue.number,
              body: md
            });
