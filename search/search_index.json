{"config":{"lang":["en"],"separator":"[\\s\\-]+","pipeline":["stopWordFilter"]},"docs":[{"location":"","title":"index","text":""},{"location":"getting-start/","title":"Getting Started with Agents Service","text":"<p>Welcome to Agents Service \u2013 an agentic microservice built using LangGraph. This guide will help you set up the project on your local machine, run the service, and get started with development.</p>"},{"location":"getting-start/#prerequisites","title":"Prerequisites","text":"<p>Before you begin, ensure you have the following installed:</p> <ul> <li>Python 3.12 or higher</li> <li>uv \u2013 a modern dependency and environment manager   (Installation instructions: uv GitHub Repository)</li> <li>Docker</li> </ul>"},{"location":"getting-start/#1-clone-the-repository","title":"1. Clone the Repository","text":"<p>First, clone the repository from GitHub:</p> <pre><code>git clone https://github.com/FabioCaffarello/agents-service.git\ncd agents-service\n</code></pre>"},{"location":"getting-start/#2-set-up-the-virtual-environment","title":"2. Set Up the Virtual Environment","text":"<p>Your project uses uv to manage the virtual environment and dependencies. The Makefile includes a <code>setup</code> target that handles environment creation, dependency installation, and pre-commit hook setup.</p> <p>Run the following command to set up the project:</p> <pre><code>make setup\n</code></pre> <p>This command performs the following steps: - Creates a virtual environment in the <code>.venv</code> directory. - Installs all dependencies including development and documentation extras. - Sets executable permissions on the branch-check script. - Installs the pre-commit hooks for both commit and push stages.</p>"},{"location":"getting-start/#3-running-the-service","title":"3. Running the Service","text":"<p>To start the development server (with auto-reload), run:</p> <p>&lt;!-- ```bash uv run python -m uvicorn src.main:app --reload <pre><code>Then, open your browser and visit [http://127.0.0.1:8000](http://127.0.0.1:8000) to view the service.\n\n--- --&gt;\n\n## 4. Running Tests\n\nTo run the test suite, use the Makefile target for checking tests:\n\n```bash\nmake check\n</code></pre></p> <p>This command executes <code>pytest</code> within the uv-managed environment.</p>"},{"location":"getting-start/#5-linting-and-code-quality","title":"5. Linting and Code Quality","text":"<p>To format and lint your code, use the following targets:</p> <ul> <li>Format Code (using Ruff):</li> </ul> <pre><code>make format\n</code></pre> <ul> <li>Lint Code (using Ruff):</li> </ul> <pre><code>make lint\n</code></pre> <ul> <li>Run Pre-commit Hooks:</li> </ul> <pre><code>make precommit\n</code></pre>"},{"location":"getting-start/#6-documentation","title":"6. Documentation","text":""},{"location":"getting-start/#serve-documentation-locally","title":"Serve Documentation Locally","text":"<p>Your project documentation is managed with MkDocs. To serve the docs locally with live-reloading, run:</p> <pre><code>make server-docs\n</code></pre> <p>Then, visit http://127.0.0.1:8000 in your browser.</p>"},{"location":"getting-start/#deploy-documentation","title":"Deploy Documentation","text":"<p>To deploy the documentation to GitHub Pages, run:</p> <pre><code>make deploy-docs\n</code></pre> <p>This command will build the documentation and push it to the appropriate branch for GitHub Pages.</p>"},{"location":"getting-start/#7-additional-commands","title":"7. Additional Commands","text":"<p>For other tasks, refer to the Makefile by running:</p> <pre><code>make help\n</code></pre> <p>This will list all available commands and their descriptions.</p>"},{"location":"getting-start/#8-troubleshooting","title":"8. Troubleshooting","text":"<ul> <li> <p>Virtual Environment Issues:   If you encounter any issues with the virtual environment, try running <code>make clean</code> to clear caches and temporary files, then run <code>make setup</code> again.</p> </li> <li> <p>Pre-commit Hooks:   If pre-commit hooks aren\u2019t running as expected, ensure they\u2019re installed by running:</p> </li> </ul> <pre><code>pre-commit install\n</code></pre> <ul> <li>Dependency Updates:   When you update your dependencies in <code>pyproject.toml</code>, remember to run:</li> </ul> <pre><code>uv lock\n</code></pre> <p>to update the lock file.</p>"},{"location":"summary/","title":"Summary","text":"<ul> <li>Home</li> <li>Getting Start</li> <li>Packages</li> </ul>"},{"location":"reference/","title":"agents-service","text":""},{"location":"reference/docs/","title":"index","text":""},{"location":"reference/docs/getting-start/","title":"Getting Started with Agents Service","text":"<p>Welcome to Agents Service \u2013 an agentic microservice built using LangGraph. This guide will help you set up the project on your local machine, run the service, and get started with development.</p>"},{"location":"reference/docs/getting-start/#prerequisites","title":"Prerequisites","text":"<p>Before you begin, ensure you have the following installed:</p> <ul> <li>Python 3.12 or higher</li> <li>uv \u2013 a modern dependency and environment manager   (Installation instructions: uv GitHub Repository)</li> <li>Docker</li> </ul>"},{"location":"reference/docs/getting-start/#1-clone-the-repository","title":"1. Clone the Repository","text":"<p>First, clone the repository from GitHub:</p> <pre><code>git clone https://github.com/FabioCaffarello/agents-service.git\ncd agents-service\n</code></pre>"},{"location":"reference/docs/getting-start/#2-set-up-the-virtual-environment","title":"2. Set Up the Virtual Environment","text":"<p>Your project uses uv to manage the virtual environment and dependencies. The Makefile includes a <code>setup</code> target that handles environment creation, dependency installation, and pre-commit hook setup.</p> <p>Run the following command to set up the project:</p> <pre><code>make setup\n</code></pre> <p>This command performs the following steps: - Creates a virtual environment in the <code>.venv</code> directory. - Installs all dependencies including development and documentation extras. - Sets executable permissions on the branch-check script. - Installs the pre-commit hooks for both commit and push stages.</p>"},{"location":"reference/docs/getting-start/#3-running-the-service","title":"3. Running the Service","text":"<p>To start the development server (with auto-reload), run:</p> <p>&lt;!-- ```bash uv run python -m uvicorn src.main:app --reload <pre><code>Then, open your browser and visit [http://127.0.0.1:8000](http://127.0.0.1:8000) to view the service.\n\n--- --&gt;\n\n## 4. Running Tests\n\nTo run the test suite, use the Makefile target for checking tests:\n\n```bash\nmake check\n</code></pre></p> <p>This command executes <code>pytest</code> within the uv-managed environment.</p>"},{"location":"reference/docs/getting-start/#5-linting-and-code-quality","title":"5. Linting and Code Quality","text":"<p>To format and lint your code, use the following targets:</p> <ul> <li>Format Code (using Ruff):</li> </ul> <pre><code>make format\n</code></pre> <ul> <li>Lint Code (using Ruff):</li> </ul> <pre><code>make lint\n</code></pre> <ul> <li>Run Pre-commit Hooks:</li> </ul> <pre><code>make precommit\n</code></pre>"},{"location":"reference/docs/getting-start/#6-documentation","title":"6. Documentation","text":""},{"location":"reference/docs/getting-start/#serve-documentation-locally","title":"Serve Documentation Locally","text":"<p>Your project documentation is managed with MkDocs. To serve the docs locally with live-reloading, run:</p> <pre><code>make server-docs\n</code></pre> <p>Then, visit http://127.0.0.1:8000 in your browser.</p>"},{"location":"reference/docs/getting-start/#deploy-documentation","title":"Deploy Documentation","text":"<p>To deploy the documentation to GitHub Pages, run:</p> <pre><code>make deploy-docs\n</code></pre> <p>This command will build the documentation and push it to the appropriate branch for GitHub Pages.</p>"},{"location":"reference/docs/getting-start/#7-additional-commands","title":"7. Additional Commands","text":"<p>For other tasks, refer to the Makefile by running:</p> <pre><code>make help\n</code></pre> <p>This will list all available commands and their descriptions.</p>"},{"location":"reference/docs/getting-start/#8-troubleshooting","title":"8. Troubleshooting","text":"<ul> <li> <p>Virtual Environment Issues:   If you encounter any issues with the virtual environment, try running <code>make clean</code> to clear caches and temporary files, then run <code>make setup</code> again.</p> </li> <li> <p>Pre-commit Hooks:   If pre-commit hooks aren\u2019t running as expected, ensure they\u2019re installed by running:</p> </li> </ul> <pre><code>pre-commit install\n</code></pre> <ul> <li>Dependency Updates:   When you update your dependencies in <code>pyproject.toml</code>, remember to run:</li> </ul> <pre><code>uv lock\n</code></pre> <p>to update the lock file.</p>"},{"location":"reference/docs/summary/","title":"Summary","text":"<ul> <li>Home</li> <li>Getting Start</li> <li>Packages</li> </ul>"},{"location":"reference/packages/cliargs/","title":"CLIargs","text":"<p>CLIargs is a lightweight command-line interface helper library for Python, built on top of the standard <code>argparse</code> module. It provides a simple, consistent way to create and configure argument parsers with common utility flags that can be used across your applications.</p>"},{"location":"reference/packages/cliargs/#features","title":"Features","text":"<ul> <li>Easy Parser Creation: Quickly create an <code>ArgumentParser</code> with a provided description.</li> <li>Common Utility Flags: Pre-configured flags for verbosity, debugging, logging levels, and version information.</li> <li>Extensible: Built as a foundation that you can easily extend with custom flags and subcommands.</li> </ul>"},{"location":"reference/packages/cliargs/#usage","title":"Usage","text":"<p>Here's a basic example demonstrating how to create and use an argument parser with CLIargs:</p> <pre><code>from cliargs.cli import new_args_parser\n\ndef main():\n    parser = new_args_parser(\"Example Application\")\n    args = parser.parse_args()\n\n    if args.verbose:\n        print(\"Verbose mode enabled.\")\n    if args.debug:\n        print(\"Debug mode is active.\")\n\n    print(f\"Log level: {args.log_level}\")\n    print(f\"Configuration file: {args.config}\")\n\nif __name__ == '__main__':\n    main()\n</code></pre>"},{"location":"reference/packages/cliargs/#available-flags","title":"Available Flags","text":"<ul> <li><code>--verbose</code>: Enable verbose output.</li> <li><code>--debug</code>: Activate debug mode with detailed logging.</li> <li><code>--log-level</code>: Set the logging level (choices: DEBUG, INFO, WARNING, ERROR, CRITICAL; defaults to INFO).</li> <li><code>--version</code>: Print the library\u2019s version and exit.</li> </ul>"},{"location":"reference/packages/cliargs/#testing","title":"Testing","text":"<p>To run the tests for this library, navigate to the logger project directory and run:</p> <pre><code>uv --project packages/cliargs run pytest --cov=packages/cliargs/src/cliargs --cov-report=term-missing --cov-config=.coveragerc\n</code></pre> <p>This will execute the tests defined in the <code>packages/cliargs/tests</code> directory with coverage.</p>"},{"location":"reference/packages/cliargs/code_reference/src/cliargs/cli/","title":"Cli","text":"<p>Module for Creating a Standard Argument Parser</p> <p>This module provides a convenience function to generate an argparse.ArgumentParser instance with common command-line options such as verbose output, debug mode, logging level, and version information. It is designed to simplify the creation of consistent CLI interfaces across multiple applications.</p> <p>Functions:</p> Name Description <code>new_args_parser</code> <p>str) -&gt; argparse.ArgumentParser Creates an ArgumentParser configured with standard arguments.</p>"},{"location":"reference/packages/cliargs/code_reference/src/cliargs/cli/#packages.cliargs.src.cliargs.cli.new_args_parser","title":"<code>new_args_parser(description)</code>","text":"<p>Create and return an ArgumentParser with standard CLI options.</p> <p>This function initializes an argparse.ArgumentParser with the provided description and adds the following command-line arguments:</p> <pre><code>--verbose:\n    Enable verbose output.\n\n--debug:\n    Activate debug mode with detailed logging.\n\n--log-level:\n    Set the logging level. Acceptable values are \"DEBUG\", \"INFO\",\n    \"WARNING\", \"ERROR\", and \"CRITICAL\". Defaults to \"INFO\".\n\n--version:\n    Display the application's version and exit. The version is\n    hardcoded as \"0.1.0\".\n</code></pre> <p>Parameters:</p> Name Type Description Default <code>description</code> <code>str</code> <p>A brief description of the application, which is displayed in the help message.</p> required <p>Returns:</p> Type Description <code>ArgumentParser</code> <p>argparse.ArgumentParser: An ArgumentParser object configured with the</p> <code>ArgumentParser</code> <p>standard command-line arguments.</p> Source code in <code>packages/cliargs/src/cliargs/cli.py</code> <pre><code>def new_args_parser(description: str) -&gt; argparse.ArgumentParser:\n    \"\"\"Create and return an ArgumentParser with standard CLI options.\n\n    This function initializes an argparse.ArgumentParser with the provided\n    description and adds the following command-line arguments:\n\n        --verbose:\n            Enable verbose output.\n\n        --debug:\n            Activate debug mode with detailed logging.\n\n        --log-level:\n            Set the logging level. Acceptable values are \"DEBUG\", \"INFO\",\n            \"WARNING\", \"ERROR\", and \"CRITICAL\". Defaults to \"INFO\".\n\n        --version:\n            Display the application's version and exit. The version is\n            hardcoded as \"0.1.0\".\n\n    Args:\n        description (str): A brief description of the application, which is\n            displayed in the help message.\n\n    Returns:\n        argparse.ArgumentParser: An ArgumentParser object configured with the\n        standard command-line arguments.\n    \"\"\"\n    parser = argparse.ArgumentParser(description=description)\n    parser.add_argument(\"--verbose\", action=\"store_true\", help=\"Enable verbose output.\")\n    parser.add_argument(\n        \"--debug\",\n        action=\"store_true\",\n        help=\"Activate debug mode with detailed logging.\",\n    )\n    parser.add_argument(\n        \"--log-level\",\n        type=str,\n        default=\"INFO\",\n        choices=[\"DEBUG\", \"INFO\", \"WARNING\", \"ERROR\", \"CRITICAL\"],\n        help=\"Set the logging level. Defaults to INFO.\",\n    )\n    parser.add_argument(\n        \"--version\",\n        action=\"version\",\n        version=\"%(prog)s 0.1.0\",\n        help=\"Show the application's version and exit.\",\n    )\n    return parser\n</code></pre>"},{"location":"reference/packages/logger/","title":"Logger Library","text":"<p>A simple logging library for Agents Service that provides JSON-formatted logging using python-json-logger. This library is designed to integrate seamlessly with your application while enabling structured logging for better observability and easier log parsing.</p>"},{"location":"reference/packages/logger/#features","title":"Features","text":"<ul> <li>JSON-Formatted Logging: Outputs log messages in JSON format, making it easier to ingest logs in modern logging systems.</li> <li>Configurable Log Levels: Set the log level via environment variables or directly in your code.</li> <li>Easy Integration: Simple API to set up logging in any module.</li> </ul>"},{"location":"reference/packages/logger/#usage","title":"Usage","text":"<p>Here's a quick example of how to use the logger library in your code:</p> <pre><code>from logger.log import setup_logging\n\n# Set up the logger for the current module\nlogger = setup_logging(__name__, log_level=\"DEBUG\")\n\nlogger.info(\"This is an informational message.\")\nlogger.error(\"An error occurred!\", extra={\"error_code\": 123})\n</code></pre>"},{"location":"reference/packages/logger/#testing","title":"Testing","text":"<p>To run the tests for this library, navigate to the logger project directory and run:</p> <pre><code>uv --project packages/logger run pytest --cov=packages/logger/src/logger --cov-report=term-missing --cov-config=.coveragerc\n</code></pre> <p>This will execute the tests defined in the <code>packages/logger/tests</code> directory with coverage.</p>"},{"location":"reference/packages/logger/code_reference/src/logger/log/","title":"Log","text":"<p>Logging module.</p>"},{"location":"reference/packages/logger/code_reference/src/logger/log/#packages.logger.src.logger.log.setup_logging","title":"<code>setup_logging(module_name, propagate=False, log_level=os.getenv('LOG_LEVEL', 'INFO').upper())</code>","text":"<p>Set up logging using JSON format.</p> <p>Parameters:</p> Name Type Description Default <code>module_name</code> <code>str</code> <p>The module name.</p> required <code>propagate</code> <code>bool</code> <p>Whether to propagate the logging to the parent logger.</p> <code>False</code> <code>log_level</code> <code>str</code> <p>The log level.</p> <code>upper()</code> <p>Returns:</p> Type Description <code>Logger</code> <p>The logger.</p> Source code in <code>packages/logger/src/logger/log.py</code> <pre><code>def setup_logging(\n    module_name: str,\n    propagate: bool = False,\n    log_level: str = os.getenv(\"LOG_LEVEL\", \"INFO\").upper(),\n) -&gt; logging.Logger:\n    \"\"\"\n    Set up logging using JSON format.\n\n    Args:\n        module_name (str): The module name.\n        propagate (bool): Whether to propagate the logging to the parent logger.\n        log_level (str): The log level.\n\n    Returns:\n        The logger.\n    \"\"\"\n    log_handler = logging.StreamHandler()\n    formatter = json.JsonFormatter(\"%(levelname)s %(filename)s %(message)s\")\n    log_handler.setFormatter(formatter)\n\n    logger = logging.getLogger(module_name)\n    logger.addHandler(log_handler)\n    logger.propagate = propagate\n    logger.setLevel(logging.getLevelName(log_level))\n    return logger\n</code></pre>"}]}