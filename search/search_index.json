{"config":{"lang":["en"],"separator":"[\\s\\-]+","pipeline":["stopWordFilter"]},"docs":[{"location":"","title":"index","text":""},{"location":"getting-start/","title":"Getting Started with Agents Service","text":"<p>Welcome to Agents Service \u2013 an agentic microservice built using LangGraph. This guide will help you set up the project on your local machine, run the service, and get started with development.</p>"},{"location":"getting-start/#prerequisites","title":"Prerequisites","text":"<p>Before you begin, ensure you have the following installed:</p> <ul> <li>Python 3.12 or higher</li> <li>uv \u2013 a modern dependency and environment manager   (Installation instructions: uv GitHub Repository)</li> <li>Docker</li> </ul>"},{"location":"getting-start/#1-clone-the-repository","title":"1. Clone the Repository","text":"<p>First, clone the repository from GitHub:</p> <pre><code>git clone https://github.com/FabioCaffarello/agents-service.git\ncd agents-service\n</code></pre>"},{"location":"getting-start/#2-set-up-the-virtual-environment","title":"2. Set Up the Virtual Environment","text":"<p>Your project uses uv to manage the virtual environment and dependencies. The Makefile includes a <code>setup</code> target that handles environment creation, dependency installation, and pre-commit hook setup.</p> <p>Run the following command to set up the project:</p> <pre><code>make setup\n</code></pre> <p>This command performs the following steps: - Creates a virtual environment in the <code>.venv</code> directory. - Installs all dependencies including development and documentation extras. - Sets executable permissions on the branch-check script. - Installs the pre-commit hooks for both commit and push stages.</p>"},{"location":"getting-start/#3-running-the-service","title":"3. Running the Service","text":"<p>To start the development server (with auto-reload), run:</p> <p>&lt;!-- ```bash uv run python -m uvicorn src.main:app --reload <pre><code>Then, open your browser and visit [http://127.0.0.1:8000](http://127.0.0.1:8000) to view the service.\n\n--- --&gt;\n\n## 4. Running Tests\n\nTo run the test suite, use the Makefile target for checking tests:\n\n```bash\nmake check\n</code></pre></p> <p>This command executes <code>pytest</code> within the uv-managed environment.</p>"},{"location":"getting-start/#5-linting-and-code-quality","title":"5. Linting and Code Quality","text":"<p>To format and lint your code, use the following targets:</p> <ul> <li>Format Code (using Ruff):</li> </ul> <pre><code>make format\n</code></pre> <ul> <li>Lint Code (using Ruff):</li> </ul> <pre><code>make lint\n</code></pre> <ul> <li>Run Pre-commit Hooks:</li> </ul> <pre><code>make precommit\n</code></pre>"},{"location":"getting-start/#6-documentation","title":"6. Documentation","text":""},{"location":"getting-start/#serve-documentation-locally","title":"Serve Documentation Locally","text":"<p>Your project documentation is managed with MkDocs. To serve the docs locally with live-reloading, run:</p> <pre><code>make server-docs\n</code></pre> <p>Then, visit http://127.0.0.1:8000 in your browser.</p>"},{"location":"getting-start/#deploy-documentation","title":"Deploy Documentation","text":"<p>To deploy the documentation to GitHub Pages, run:</p> <pre><code>make deploy-docs\n</code></pre> <p>This command will build the documentation and push it to the appropriate branch for GitHub Pages.</p>"},{"location":"getting-start/#7-additional-commands","title":"7. Additional Commands","text":"<p>For other tasks, refer to the Makefile by running:</p> <pre><code>make help\n</code></pre> <p>This will list all available commands and their descriptions.</p>"},{"location":"getting-start/#8-troubleshooting","title":"8. Troubleshooting","text":"<ul> <li> <p>Virtual Environment Issues:   If you encounter any issues with the virtual environment, try running <code>make clean</code> to clear caches and temporary files, then run <code>make setup</code> again.</p> </li> <li> <p>Pre-commit Hooks:   If pre-commit hooks aren\u2019t running as expected, ensure they\u2019re installed by running:</p> </li> </ul> <pre><code>pre-commit install\n</code></pre> <ul> <li>Dependency Updates:   When you update your dependencies in <code>pyproject.toml</code>, remember to run:</li> </ul> <pre><code>uv lock\n</code></pre> <p>to update the lock file.</p>"},{"location":"summary/","title":"Summary","text":"<ul> <li>Home</li> <li>Getting Start</li> <li>Packages</li> </ul>"},{"location":"reference/","title":"agents-service","text":""},{"location":"reference/docs/","title":"index","text":""},{"location":"reference/docs/getting-start/","title":"Getting Started with Agents Service","text":"<p>Welcome to Agents Service \u2013 an agentic microservice built using LangGraph. This guide will help you set up the project on your local machine, run the service, and get started with development.</p>"},{"location":"reference/docs/getting-start/#prerequisites","title":"Prerequisites","text":"<p>Before you begin, ensure you have the following installed:</p> <ul> <li>Python 3.12 or higher</li> <li>uv \u2013 a modern dependency and environment manager   (Installation instructions: uv GitHub Repository)</li> <li>Docker</li> </ul>"},{"location":"reference/docs/getting-start/#1-clone-the-repository","title":"1. Clone the Repository","text":"<p>First, clone the repository from GitHub:</p> <pre><code>git clone https://github.com/FabioCaffarello/agents-service.git\ncd agents-service\n</code></pre>"},{"location":"reference/docs/getting-start/#2-set-up-the-virtual-environment","title":"2. Set Up the Virtual Environment","text":"<p>Your project uses uv to manage the virtual environment and dependencies. The Makefile includes a <code>setup</code> target that handles environment creation, dependency installation, and pre-commit hook setup.</p> <p>Run the following command to set up the project:</p> <pre><code>make setup\n</code></pre> <p>This command performs the following steps: - Creates a virtual environment in the <code>.venv</code> directory. - Installs all dependencies including development and documentation extras. - Sets executable permissions on the branch-check script. - Installs the pre-commit hooks for both commit and push stages.</p>"},{"location":"reference/docs/getting-start/#3-running-the-service","title":"3. Running the Service","text":"<p>To start the development server (with auto-reload), run:</p> <p>&lt;!-- ```bash uv run python -m uvicorn src.main:app --reload <pre><code>Then, open your browser and visit [http://127.0.0.1:8000](http://127.0.0.1:8000) to view the service.\n\n--- --&gt;\n\n## 4. Running Tests\n\nTo run the test suite, use the Makefile target for checking tests:\n\n```bash\nmake check\n</code></pre></p> <p>This command executes <code>pytest</code> within the uv-managed environment.</p>"},{"location":"reference/docs/getting-start/#5-linting-and-code-quality","title":"5. Linting and Code Quality","text":"<p>To format and lint your code, use the following targets:</p> <ul> <li>Format Code (using Ruff):</li> </ul> <pre><code>make format\n</code></pre> <ul> <li>Lint Code (using Ruff):</li> </ul> <pre><code>make lint\n</code></pre> <ul> <li>Run Pre-commit Hooks:</li> </ul> <pre><code>make precommit\n</code></pre>"},{"location":"reference/docs/getting-start/#6-documentation","title":"6. Documentation","text":""},{"location":"reference/docs/getting-start/#serve-documentation-locally","title":"Serve Documentation Locally","text":"<p>Your project documentation is managed with MkDocs. To serve the docs locally with live-reloading, run:</p> <pre><code>make server-docs\n</code></pre> <p>Then, visit http://127.0.0.1:8000 in your browser.</p>"},{"location":"reference/docs/getting-start/#deploy-documentation","title":"Deploy Documentation","text":"<p>To deploy the documentation to GitHub Pages, run:</p> <pre><code>make deploy-docs\n</code></pre> <p>This command will build the documentation and push it to the appropriate branch for GitHub Pages.</p>"},{"location":"reference/docs/getting-start/#7-additional-commands","title":"7. Additional Commands","text":"<p>For other tasks, refer to the Makefile by running:</p> <pre><code>make help\n</code></pre> <p>This will list all available commands and their descriptions.</p>"},{"location":"reference/docs/getting-start/#8-troubleshooting","title":"8. Troubleshooting","text":"<ul> <li> <p>Virtual Environment Issues:   If you encounter any issues with the virtual environment, try running <code>make clean</code> to clear caches and temporary files, then run <code>make setup</code> again.</p> </li> <li> <p>Pre-commit Hooks:   If pre-commit hooks aren\u2019t running as expected, ensure they\u2019re installed by running:</p> </li> </ul> <pre><code>pre-commit install\n</code></pre> <ul> <li>Dependency Updates:   When you update your dependencies in <code>pyproject.toml</code>, remember to run:</li> </ul> <pre><code>uv lock\n</code></pre> <p>to update the lock file.</p>"},{"location":"reference/docs/summary/","title":"Summary","text":"<ul> <li>Home</li> <li>Getting Start</li> <li>Packages</li> </ul>"},{"location":"reference/packages/logger/","title":"Logger Library","text":"<p>A simple logging library for Agents Service that provides JSON-formatted logging using python-json-logger. This library is designed to integrate seamlessly with your application while enabling structured logging for better observability and easier log parsing.</p>"},{"location":"reference/packages/logger/#features","title":"Features","text":"<ul> <li>JSON-Formatted Logging: Outputs log messages in JSON format, making it easier to ingest logs in modern logging systems.</li> <li>Configurable Log Levels: Set the log level via environment variables or directly in your code.</li> <li>Easy Integration: Simple API to set up logging in any module.</li> </ul>"},{"location":"reference/packages/logger/#usage","title":"Usage","text":"<p>Here's a quick example of how to use the logger library in your code:</p> <pre><code>from logger.log import setup_logging\n\n# Set up the logger for the current module\nlogger = setup_logging(__name__, log_level=\"DEBUG\")\n\nlogger.info(\"This is an informational message.\")\nlogger.error(\"An error occurred!\", extra={\"error_code\": 123})\n</code></pre>"},{"location":"reference/packages/logger/#testing","title":"Testing","text":"<p>To run the tests for this library, navigate to the logger project directory and run:</p> <pre><code>uv --project packages/logger run pytest --cov=packages/logger/src/logger --cov-report=term-missing --cov-config=.coveragerc\n</code></pre> <p>This will execute the tests defined in the <code>packages/logger/tests</code> directory with coverage.</p>"}]}